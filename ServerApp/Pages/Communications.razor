@page "/communications"
@using global::App.Shared.Dtos
@inject ServerApp.Services.CreateReadCommunicationService CommunicationService
@inject NavigationManager NavigationManager

<h3>Communications List</h3>

@if (result == null)
{
    <p><em>Loading...</em></p>
}
else if (result.Items.Count == 0)
{
    <p>No communications found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Title</th>
                <th>Type</th>
                <th>Current Status</th>
                <th>Last Updated</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var comm in result.Items)
            {
                <tr>
                    <td>@comm.Title</td>
                    <td>@comm.TypeCode</td>
                    <td>@comm.CurrentStatus</td>
                    <td>@comm.LastUpdatedUtc.ToLocalTime().ToString("g")</td>
                    <td>
                        <button class="btn btn-link" @onclick="() => ViewDetails(comm.Id)">View Details</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="mt-3">
        <button class="btn btn-secondary" @onclick="PrevPage" disabled="@IsFirstPage">Previous</button>
        <span class="mx-2">Page @currentPage of @totalPages</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@IsLastPage">Next</button>
    </div>
}

@code {
    private PaginatedResult<CommunicationDto>? result;
    private int currentPage = 1;
    private int pageSize = 10;
    /*
    computing total number of pages to load
    based on total page size and count of items.
    Value is rounded so partial pages aren't cut off
    by page size restriction. Explicit Int casting to
    be used for total pages.
    */
    private int totalPages => (int)Math.Ceiling((double)(result?.TotalCount ?? 0) / pageSize); 
    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage >= totalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadPage(currentPage);
    }

    private async Task LoadPage(int page)
    {
        result = await CommunicationService.GetCommunicationsAsync(page, pageSize);
        currentPage = page;
    }

    private async Task NextPage()
    {
        if (!IsLastPage)
            await LoadPage(currentPage + 1);
    }

    private async Task PrevPage()
    {
        if (!IsFirstPage)
            await LoadPage(currentPage - 1);
    }

    private void ViewDetails(Guid id)
    {
        NavigationManager.NavigateTo($"/communications/{id}");
    }
}
