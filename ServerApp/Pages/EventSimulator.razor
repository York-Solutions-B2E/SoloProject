@page "/eventSimulator"
@using global::App.Shared.Dtos
<button @onclick="PublishEvent">Publish Event</button>

@page "/event-simulator"
@inject HttpClient Http
@inject ServerApp.Services.CreateReadCommunicationService CommunicationService

<h3>Event Simulator</h3>

@if (communications == null)
{
    <p><em>Loading communications...</em></p>
}
else
{
    <div class="mb-3">
        <label for="communicationSelect">Select Communication</label>
        <select id="communicationSelect" class="form-control" @bind="selectedId">
            <option value="">-- Select Communication --</option>
            @foreach (var comm in communications)
            {
                <option value="@comm.Id">@comm.Title (@comm.TypeCode)</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="eventSelect">Select Event</label>
        <select id="eventSelect" class="form-control" @bind="selectedEventCode">
        <option value="">-- Select Event --</option>
        @foreach (var evt in filteredEventCodes)
        {
            <option value="@evt">@evt</option>
        }
    </select>
    </div>

    <button class="btn btn-primary" @onclick="PublishEvent" disabled="@isPublishing">Publish Event</button>

    @if (publishMessage != null)
    {
        <div class="alert @publishMessageClass mt-3">@publishMessage</div>
    }
}

@code {
    private List<CommunicationDto>? communications;
    private Guid selectedId;
    private string selectedEventCode = string.Empty;

    private List<string> filteredEventCodes =>
    communications?.FirstOrDefault(c => c.Id == selectedId)?.AllowedStatusCodes ?? new();

    private bool isPublishing = false;
    private string? publishMessage;
    private string publishMessageClass = "";

    protected override async Task OnInitializedAsync()
    {
        communications = (await CommunicationService.GetAllAsync()).ToList();
    }

    private async Task PublishEvent()
    {
        publishMessage = null;

        if (selectedId == Guid.Empty || string.IsNullOrEmpty(selectedEventCode))
        {
            publishMessage = "Please select both a communication and an event.";
            publishMessageClass = "alert-warning";
            return;
        }

        isPublishing = true;

        var dto = new CommunicationEventDto
        {
            CommunicationId = selectedId,
            EventCode = selectedEventCode,
            PublishedAt = DateTime.UtcNow
        };

        try
        {
            var response = await Http.PostAsJsonAsync("http://webapi/api/communicationevents", dto);
            if (response.IsSuccessStatusCode)
            {
                publishMessage = "Event published successfully!";
                publishMessageClass = "alert-success";
            }
            else
            {
                publishMessage = $"Failed to publish event: {response.StatusCode}";
                publishMessageClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            publishMessage = $"Error publishing event: {ex.Message}";
            publishMessageClass = "alert-danger";
        }
        finally
        {
            isPublishing = false;
        }
    }
}
