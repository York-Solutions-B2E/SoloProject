@page "/admin/communication-types"

@using global::App.Shared.Dtos
@using ServerApp.Services
@inject CRUDCommunicationTypeService TypeService
@attribute [Authorize(Roles = "Admin")]

<AuthorizeView Roles="Admin">
    <Authorized>
<h3>Manage Communication Types</h3>

@if (types == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th>Type Code</th>
            <th>Display Name</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var t in types)
        {
            <tr>
                @if (editType != null && editType.TypeCode == t.TypeCode)
                {
                    <td><input @bind="editType.TypeCode" class="form-control" /></td>
                    <td><input @bind="editType.DisplayName" class="form-control" /></td>
                    <td>
                        <div>
                            <h6>Statuses</h6>
                            @foreach (var status in editType.Statuses)
                            {
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input"
                                        @bind="status.IsValid" />
                                    <label class="form-check-label">@status.StatusCode</label>
                                    <input placeholder="Description"
                                        @bind="status.Description"
                                        class="form-control form-control-sm mt-1" />
                                </div>
                            }
                        </div>
                        <button class="btn btn-sm btn-success" @onclick="SaveEdit">Save</button>
                        <button class="btn btn-sm btn-secondary" @onclick="CancelEdit">Cancel</button>
                    </td>
                }
                else
                {
                    <td>@t.TypeCode</td>
                    <td>@t.DisplayName</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => StartEdit(t)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteType(t.TypeCode)">Delete</button>
                    </td>
                }
            </tr>
        }
    </tbody>
</table>
}

<h4>Add New</h4>
<input placeholder="Type Code" @bind="newType.TypeCode" class="form-control" />
<input placeholder="Display Name" @bind="newType.DisplayName" class="form-control" />
<button class="btn btn-primary mt-2" @onclick="AddType">Add</button>
</Authorized>

    <NotAuthorized>
        <div class="alert alert-danger mt-3">
            You are not authorized to view this page.
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<CommunicationTypeDto>? types;
    private CommunicationTypeDto newType = new CommunicationTypeDto

    
{
    TypeCode = string.Empty,
    DisplayName = string.Empty
};
    private CommunicationTypeDto? editType;
    protected override async Task OnInitializedAsync()
    {
        types = await TypeService.GetAllAsync();
    }

    private async Task AddType()
    {
        if (await TypeService.CreateAsync(newType))
        {
            newType = new CommunicationTypeDto
            {
                TypeCode = "",
                DisplayName = ""
            }; // reset
            types = await TypeService.GetAllAsync();
        }
    }

    private async Task StartEdit(CommunicationTypeDto type)
    {
        // Clone the object so editing is isolated until saved
        editType = new CommunicationTypeDto
        {
        TypeCode = type.TypeCode,
        DisplayName = type.DisplayName,
        Statuses = await TypeService.GetStatusesForTypeAsync(type.TypeCode)
        };
    }

    private async Task SaveEdit()
    {
        if (editType is not null)
        {
            bool nameUpdated = await TypeService.UpdateAsync(editType);
            bool statusesUpdated = await TypeService.UpdateStatusesAsync(editType.TypeCode, editType.Statuses);

            if (nameUpdated && statusesUpdated)
            {
                types = await TypeService.GetAllAsync();
                editType = null;
            }
        }
    }

    private void CancelEdit()
    {
    editType = null; // discard changes and exit editing mode
    }

    private async Task DeleteType(string typeCode)
    {
        if (await TypeService.DeleteAsync(typeCode))
        {
            types = await TypeService.GetAllAsync();
        }
    }
}
